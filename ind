#!/bin/bash
# Calculates Byzantine date & Indiction
# 2013-07-16

COMMON=true
LUNAR=
HEBREW=
BYZANTINE=true
ROME=
BUDDHIST=true
HOLIDAYS=true

budconvert=543	# Thai Solar
hebconvert=3760 # Hebrew; year begins in September (day varies)
byzconvert=5508 # Byzantine; year begins September 1st
romconvert=753  # Founding of Rome - 753 BCE
MONTHS=(dummy Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec)
MONTHL=(dummy January February March April May June July August September October November December)
EPACTS=(0 29 10 21 2 13 24 5 16 27 8 19 30 11 22 3 14 25 6 17)
DOMINI=(G A B C D E F)
PHASES=("New Moon" "First Quarter" "Full Moon" "Last Quarter")

rem="remind"

setdate () { # usage: setdate [yesterday|today|tomorrow]
	year=$(date -d "$1" +%Y)
	month=$(date -d "$1" +%-m);month=$(printf "%02d" $month)
	day=$(date -d "$1" +%-d);day=$(printf "%02d" $day)
}

ordinal () {
	case "$1" in
		1)	ord="st";;
		2)	ord="nd";;	
		3)	ord="rd";;
		*)	ord="th";;
	esac
}

is_leap_year() { ## USAGE: is_leap_year [year]
	ily_year=${1:-`date +%Y`}
	case $ily_year in
		*0[48] |\
		*[2468][048] |\
		*[13579][26] |\
		*[02468][048]00 |\
		*[13579][26]00 ) _IS_LEAP_YEAR=1
		return 0 ;;
		*) unset _IS_LEAP_YEAR
		return 1 ;;
	esac
}

usage()
{
cat << EOF
usage: $(basename $0) options

Calculates and displays dates for uncommon dating systems.

OPTIONS:
	-c	Toggle Common year
	-l	Toggle Lunar data
	-j	Toggle Hebrew year
	-r	Toggle year of Rome
	-z	Toggle Byzantine year
	-b	Toggle Buddhist year
	-y	Set year
	-m	Set month
	-d	Set day
	-v	Verbose
EOF
}

setdate today # set initial date

while getopts "?hcljrzbvy:m:d:" OPTION
do
	case $OPTION in
		c) [ $COMMON ] 		&& unset COMMON 	|| COMMON=true;;
		l) [ $LUNAR ] 		&& unset LUNAR 		|| LUNAR=true;;
		j) [ $HEBREW ] 		&& unset HEBREW 	|| HEBREW=true;;
		r) [ $ROME ] 		&& unset ROME 		|| ROME=true;;
		z) [ $BYZANTINE ] 	&& unset BYZANTINE 	|| BYZANTINE=true;;
		b) [ $BUDDHIST ] 	&& unset BUDDHIST 	|| BUDDHIST=true;;
		v) VERBOSE=true;;
		y) year=$OPTARG;;
		m) month=$(printf "%02d" $OPTARG);;
		d) 
			if [[ $OPTARG =~ [A-Za-z\ ] ]] ; then # regex comparison: letters, spaces
				setdate "$OPTARG"
			else
				day=$(printf "%02d" $OPTARG)
			fi	
			;;
		*) usage; exit;;
	esac
done

[ $month -lt 1 -o $month -gt 12 ] && echo $(basename $0): Month not within range.&& echo && exit 1
[ $year -le 0 ] && echo $(basename $0): Date must be positive. && echo && exit 1

ymd="$year-$month-$day"
jd=$(date -d$ymd +%-j) # set Julian day

if [ $month -ge "9" ]; then
	(( byzantine=year+byzconvert+1 ))
	(( hebrew=year+hebconvert+1 ))
else
	(( byzantine=year+byzconvert ))
	(( hebrew=year+hebconvert ))
fi	

# more sophisticated hebrew date
if [ $(which $rem) ] ; then
	hebnyr=$((echo "BANNER %"; echo "MSG [hebdate(1, \"Tishrey\")]") | $rem - $year-01-01 | sed '/^$/d')
	hebnyrm=$(echo $hebnyr | sed 's/^....-//;s/-..$//;s/^0//') 	# leading zeros stripped
	hebnyrd=$(echo $hebnyr | sed 's/^....-..-//;s/^0//')		# leading zeros stripped
	hebyr=$( (echo "BANNER %"; echo "MSG [hebyear(today())]")	| $rem - $ymd | sed '/^$/d')
	hebmon=$((echo "BANNER %"; echo "MSG [hebmon(today())]")	| $rem - $ymd | sed '/^$/d')
	hebday=$((echo "BANNER %"; echo "MSG [hebday(today())]")	| $rem - $ymd | sed '/^$/d')
else
	hebyr=$hebrew
fi

(( rome=year+romconvert ))

(( ind=($year+2)%15+1 ))# set Gregorian indiction
ordinal $ind; gord=$ord # set Gregorian ordinal

(( byzind=$byzantine%15 )) # set Byzantine indiction
[ $byzind -eq "0" ] && byzind=15
ordinal $byzind; bord=$ord # set Byzantine ordinal

(( golden=year%19+1 ))
(( dominical=((year-1)%100%4*2+(year-1)%100%7*4+(year-1)/100%4*2)%7 ))

is_leap_year $year
if [ $_IS_LEAP_YEAR ]; then
	leap="(leap year)"
	dom="${DOMINI[$dominical]}${DOMINI[$dominical-1]}"
else
	dom="${DOMINI[$dominical]}"

fi

[ $VERBOSE ]	&& printf "Gregorian CE %d %s %d (%s)\n" $day ${MONTHS[10#$month]} $year $year-$month-$day
[ $COMMON ]	 	&& printf "CE %d %d%s Ind. / Day %d " $year $ind $gord $jd ; echo $leap
[ $LUNAR ]	 	&& printf "Metonic %s / Epact %s / Dominical %s\n" $golden ${EPACTS[$golden]} $dom
[ $HEBREW ]  	&& printf "Hebrew    AM %d (%d %s)\n" $hebyr $hebday $hebmon
				[ $HEBREW ] && [ $VERBOSE ] && printf "Rosh Hashanah: %d %s\n" $hebnyrd ${MONTHL[$hebnyrm]}
[ $ROME ]		&& printf "City of Rome %d\n" $rome
[ $BYZANTINE ]	&& printf "Byzantine AM %d %d%s Ind.\n" $byzantine $byzind $bord

(( buddhist=year+budconvert ))
[ $BUDDHIST ]	&& echo Buddhist Era $buddhist

if [ $(which $rem) ] ; then # Moon calculations
	for i in $(seq 0 3); do
		moonphase[$i]=$((echo "BANNER %"; echo "MSG [moondate($i, today(), 12:00)]") | $rem - $year-$month-01 | sed '/^$/d')
		[ "${moonphase[$i]}" = "$ymd" ] && moon=${PHASES[$i]}
		[ $VERBOSE ] && printf "%-13s: %s\n" "${PHASES[$i]}" ${moonphase[$i]}
	done

	# calculate blue / black moons
	nfmoon=$((echo "BANNER %"; echo "MSG [moondate(2, today(), 12:00)]") | $rem - $year-$month-$day | sed '/^$/d')
	nfmont=$((echo "BANNER %"; echo "MSG [moontime(2, today(), 12:00)]") | $rem - $year-$month-$day | sed '/^$/d')
	if [ "$(echo $nfmoon | sed 's/-..$//')" = "$year-$month" ] ; then
		[ "$nfmoon" != "${moonphase[2]}" ] && [ "$nfmoon" = "$ymd" ] && moon="Blue Moon"
	fi
	nnmoon=$( (echo "BANNER %"; echo "MSG [moondate(0, today(), 12:00)]") | $rem - $year-$month-$day | sed '/^$/d')
	nnmont=$( (echo "BANNER %"; echo "MSG [moontime(0, today(), 12:00)]") | $rem - $year-$month-$day | sed '/^$/d')
	if [ "$(echo $nnmoon | sed 's/-..$//')" = "$year-$month" ] ; then
		[ "$nnmoon" != "${moonphase[0]}" ] && [ "$nnmoon" = "$ymd" ] && moon="Black Moon"
	fi
	[ $VERBOSE ] && echo "Next Fullmoon: $nfmoon at $nfmont"
	[ $VERBOSE ] && echo "Next New Moon: $nnmoon at $nnmont"

	# calculate Vassa
	vsday=$((echo "BANNER %"; echo "MSG [moondate(2)+1]") | $rem - $year-07-01 | sed '/^$/d;s/^....-..-//;s/^0//')
	[ $VERBOSE ] && echo Vassa begins : $vsday ${MONTHL[7]}
		
else
	unset HOLIDAYS
	[ $VERBOSE ] && echo Moon calculations turned off. Please install \'remind\'.
fi
if [ $BUDDHIST ] && [ $HOLIDAYS ] ; then
	[ "$moon" != "" ] && observance="$moon Uposatha."
	if [ "$moon" = "Full Moon" ]; then
		[ $month -eq 2  ] && observance="Sangha day."
		[ $month -eq 5  ] && observance="Buddha day."
		[ $month -eq 7  ] && observance="Dhamma day. Vassa begins tomorrow."
		[ $month -eq 10 ] && observance="Pavarana. Vassa ends."
		[ $month -eq 11 ] && observance="Anapanasati day."
	fi
	[ $month -eq 7 -a $day -eq $vsday ]	&& observance="Vassa begins."
	[ "$observance" != "" ] && echo $observance
fi
